CREATE EXTERNAL TABLE IF NOT EXISTS `reference_tables`.`optimizely_visitors_data` (
  `uuid` varchar(300),
  `record_timestamp` timestamp,
  `visitor_id` varchar(300),
  `experiment_id` varchar(300),
  `variation_id` varchar(300)
)
				
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' 
WITH SERDEPROPERTIES (
  'serialization.format' = ',',
  'field.delim' = ','
) LOCATION 's3://perlego-s3-reference-tb/csv_files/optimizely_visitors/'
TBLPROPERTIES ('has_encrypted_data'='false');

-- Creates the actual folder on S3
CREATE EXTERNAL TABLE IF NOT EXISTS optimizely_visitors (
  uuid varchar(300),
  record_timestamp timestamp,
  visitor_id varchar(300),
  experiment_id varchar(300),
  variation_id varchar(300)
)
LOCATION 's3://perlego-s3-reference-tb/reference_tables/optimizely_visitors/'
TBLPROPERTIES ('has_encrypted_data'='false');

-- Seeds the folder using the table containing CSV data 
INSERT into "reference_tables"."optimizely_visitors" (
  uuid,
  record_timestamp,
  visitor_id,
  experiment_id,
  variation_id
)
SELECT *
FROM "reference_tables"."optimizely_visitors_data";

-- Drops the table containing CSV data.
DROP TABLE optimizely_visitors_data;

select *
from optimizely_visitors
where variation_id is not null 

drop table optimizely_visitors

----------------------
/*
https://s3.console.aws.amazon.com/s3/buckets/perlego-s3-reference-tb?region=eu-west-2&prefix=csv_files/optimizely_visitors/&showversions=false
*/

--------------------------
/* join up to tracking and insert data into athena analytics table for reports  */

CREATE EXTERNAL TABLE athena_analytics.free_trial_remove_exp (

visitor_id varchar(300),
experiment_id varchar(300),
variation_id varchar(300),
first_event_time timestamp,
last_event_time timestamp,
vistor_in_event_tracking int,
vistor_created_account int,
user_id int
)

LOCATION 's3://perlego-s3-reference-tb/athena_analytics/free_trial_remove_exp/'
TBLPROPERTIES ('has_encrypted_data'='false');

/* Insert table */

INSERT INTO athena_analytics.free_trial_remove_exp (

visitor_id,
experiment_id,
variation_id,
first_event_time,
last_event_time,
vistor_in_event_tracking,
vistor_created_account,
user_id
)


/* remove duplicates at visitor id level assuming experinment & variation is the same  */
WITH Grouped_Optimizely_File AS (

SELECT visitor_id, experiment_id, variation_id, 
       MIN(record_timestamp) as first_event_time,
       MAX(record_timestamp) as last_event_time
FROM reference_tables.optimizely_visitors
GROUP BY visitor_id, experiment_id, variation_id
),

/* mark how visitors can be identified  */

Unique_visitors_identified AS (
select unique_id, 1 as identified_in_tracking_service 
from prod_gold_bucket_database.event_tracking 
WHERE unique_id IN (SELECT visitor_id FROM Grouped_Optimizely_File)
GROUP BY unique_id),

/* find first user id associated with the visitor id  */

Unique_users_identified AS (
SELECT unique_id, user_id, 1 AS visitor_created_account
FROM (
SELECT *, ROW_NUMBER() OVER (PARTITION BY unique_id ORDER BY first_date_seen ASC) as row_rank
FROM (
SELECT unique_id, user_id, MIN(record_date) as first_date_seen
FROM prod_gold_bucket_database.event_tracking 
WHERE unique_id IN (SELECT visitor_id FROM Grouped_Optimizely_File)
AND user_id IS NOT NULL
GROUP BY unique_id, user_id)
) WHERE row_rank = 1
)

/* Join to previous tables to this one  */

SELECT Grouped_Optimizely_File.*, 
       COALESCE(identified_in_tracking_service, 0) AS vistor_in_event_tracking,
       COALESCE(visitor_created_account, 0) AS vistor_created_account,
       user_id
FROM Grouped_Optimizely_File
LEFT JOIN Unique_visitors_identified ON Unique_visitors_identified.unique_id = Grouped_Optimizely_File.visitor_id 
LEFT JOIN Unique_users_identified ON Unique_users_identified.unique_id = Grouped_Optimizely_File.visitor_id 

DROP TABLE athena_analytics.free_trial_remove_exp
