/* Tests started in December 2021 - so pull users who joined after that - with no registered country
   catch those assigned a test but have not inputted the data*/

WITH Joined_After_December AS (
    SELECT *
    FROM prod.users
    WHERE date_joined >= '2021-09-01'
),

/* Extract all users with VWO campaign Info */

User_VWO_Campaign AS (
    SELECT user_id, event_properties, json_extract_path_text(event_properties, 'vwoCampaignInfo') AS Campaign_Info
    FROM prod.event_tracking
    WHERE user_id IN (SELECT id from Joined_After_December)
      AND event_name IN ('subscription creation')
      AND json_extract_path_text(event_properties, 'vwoCampaignInfo') <> '[]'
      AND json_extract_path_text(event_properties, 'vwoCampaignInfo') <> ''
    AND record_date >= '2021-09-01' and record_date < '2022-07-30'
    and is_valid_json(event_properties) = TRUE
),

  User_VWO_Campaign_group AS (
      SELECT user_id, Campaign_Info
      FROM User_VWO_Campaign
      GROUP BY user_id, Campaign_Info),

/* group user registrations table due to different country produing virtual duplicates */

     Grouped_User_registrations AS (
SELECT user_id, user_region, acquisition_region, registration_time ,
           payment_channel_crude, geo_location, utm_medium, utm_source, utm_campaign
FROM reporting.user_registrations
WHERE internal_user = 'N'
GROUP BY user_id, user_region, acquisition_region, registration_time ,
           payment_channel_crude, geo_location, utm_medium, utm_source, utm_campaign),

/* Combine to grouped user registration table */

Combined_User_Registration_Table AS (
    SELECT Grouped_User_registrations.user_id, user_region, acquisition_region, registration_time ,
           payment_channel_crude, geo_location, utm_medium, utm_source, utm_campaign,
           REPLACE(User_VWO_Campaign_group.Campaign_Info, '"', '') AS Campaign_Info
    FROM Grouped_User_registrations
    INNER JOIN User_VWO_Campaign_group ON User_VWO_Campaign_group.user_id = Grouped_User_registrations.user_id
    ),
/* Create Subscription Table - join to prod.subscriptions to get plan id   */

Filtered_Subscription_Table AS (
SELECT user_id, start_timestamp AS Subscription_Start_Date, paid_end_timestamp, subscribed_months,
       subscription_canceled_at, total_paid_gbp, 1 AS Subscribed, discounted_months,
       CASE WHEN paid_start_timestamp IS NOT NULL THEN 1 ELSE NULL END AS Paid_Subscriber,
       ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY start_timestamp DESC) AS User_Subscritpion_Count,
       src_sub_category_id AS Subscription_PlanID
FROM reporting.subscriptions
WHERE user_id IN (SELECT user_id
                  FROM Combined_User_Registration_Table)
AND subscription_type IN('subscribed', 'Void')),

   Filtered_Subscription_Table_Cut AS (
       SELECT *
       FROM Filtered_Subscription_Table
       WHERE User_Subscritpion_Count = 1),

/* Mark user trial periods */
Trial_Period AS (
    SELECT user_id, start_timestamp AS Trial_start_date, end_timestamp AS Trial_end_date, 1 AS Trial_User,
           sub_category_name, src_sub_category_id AS Trial_PlanID, sub_category_name AS reporting_plan_name,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY start_timestamp DESC) AS Trial_user_order
    FROM reporting.subscriptions
    WHERE subscription_type = 'trial'
    AND user_id IN (SELECT user_id FROM Combined_User_Registration_Table)
),

Trial_Period_Filter AS (
SELECT *
FROM Trial_Period
WHERE Trial_user_order = 1),

/* Combine Trial & subscription tables - mark reporting plan id - subscription plan - if not then it's the one selected
   during the trial period*/

Main_Table AS (
    SELECT Combined_User_Registration_Table.*, Trial_start_date, Trial_end_date, Trial_User,
    Subscribed, Subscription_Start_Date, paid_end_timestamp, subscribed_months, subscription_canceled_at,
    total_paid_gbp, reporting_plan_name, discounted_months, Paid_Subscriber,
           REPLACE(Campaign_Info, '[{', '') AS Campaign_Info_1,
           CASE WHEN Subscription_PlanID IS NOT NULL THEN Subscription_PlanID ELSE Trial_PlanID END AS Reporting_PlanID
    FROM Combined_User_Registration_Table
    LEFT JOIN Filtered_Subscription_Table_Cut ON Filtered_Subscription_Table_Cut.user_id = Combined_User_Registration_Table.user_id
    LEFT JOIN Trial_Period_Filter ON Trial_Period_Filter.user_id = Combined_User_Registration_Table.user_id
),

/* mark users with specific subscription created event as well  */

Calculate_Results AS (
    SELECT Main_Table.user_id, Campaign_Info_1, registration_time,
    LEFT (Campaign_Info_1, POSITION (':' in Campaign_Info_1) - 1) AS VWO_Test,
    RIGHT (Campaign_Info_1, LEN(Campaign_Info_1) - POSITION (':' in Campaign_Info_1)) AS VWO_Test_Group,
    Trial_start_date, Trial_end_date, Trial_User, subscribed, Paid_Subscriber, Subscription_Start_Date, subscription_canceled_at,
    paid_end_timestamp, subscribed_months, total_paid_gbp, Reporting_PlanID, reporting_plan_name, discounted_months
FROM Main_Table
    ),

/* mark refunded users */
Refund_Users AS (
    SELECT user_id, 1 as refund_user, sum(amount / 100) as refunded_total_pounds
    FROM prod.charges
    WHERE refunded = true
      AND user_id IN (SELECT user_id
                      FROM Calculate_Results)
    group by user_id
),

/* correct income to average for monthly users in variant A of the week trial - to normalise payment lengths with the
   control group*/

Calculate_Results_final as (
select *,
       case when Reporting_PlanID = 'price_1KTOQGLmu5QiBx4BFiRo8kdY' then total_paid_gbp / (subscribed_months + 1) else total_paid_gbp end as total_gbp_correct
from Calculate_Results
         ),

Results_Table AS (
SELECT Calculate_Results_final.user_id, VWO_Test, VWO_Test_Group, Reporting_PlanID,
       SUM(Trial_User) AS Trials,
       COUNT(Distinct (CASE WHEN Trial_User = 1 THEN Calculate_Results_final.user_id ELSE NULL END)) AS Trial_user_id_count,
       SUM(Subscribed) AS Subscribed,
       SUM(Paid_Subscriber) AS PaidSubscriber,
       SUM(total_paid_gbp) AS Total_GBP,
       SUM(total_gbp_correct) AS Total_GBP_corrected,
       max(Trial_start_date) AS Last_Trial_Start_Date,
       SUM(refund_user) AS refund_users,
       SUM(refunded_total_pounds) AS refund_gbp,
       MAX(Trial_start_date) AS Last_Trial_Date
FROM Calculate_Results_final
LEFT JOIN Refund_Users ON Calculate_Results_final.user_id = Refund_Users.user_id
WHERE Trial_start_date >= '2021-09-01' and Trial_start_date <= '2022-07-15'
GROUP BY Calculate_Results_final.user_id, VWO_Test, VWO_Test_Group, Reporting_PlanID
ORDER BY VWO_Test, VWO_Test_Group)

SELECT Results_Table.*, utm_medium
FROM Results_Table
LEFT JOIN reporting.user_registrations ON reporting.user_registrations.user_id = Results_Table.user_id



